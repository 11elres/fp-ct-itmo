-- | This module defines 'ListZipper' datatype.
-- Feel free to define additional helper functions to work
-- with this datatype in this module.
module Data.ListZipper
  ( ListZipper (..)
  , lWrite
  , lLeft
  , lRight
  , lGenerator
  ) where

import           Control.Comonad (Comonad (..))

-- | List zipper.
data ListZipper a = LZ [a] a [a]

instance Functor ListZipper where
  fmap f (LZ ls x rs) = LZ (fmap f ls) (f x) (fmap f rs)

instance Comonad ListZipper where
  extract (LZ _ x _) = x

  extend f = fmap f . lGenerator lLeft lRight

-- | Replaces the focus with the given value.
lWrite :: a -> ListZipper a -> ListZipper a
lWrite x (LZ ls _ rs) = LZ ls x rs

-- | Move the 'ListZipper' to the left.
lLeft :: ListZipper a -> ListZipper a
lLeft  (LZ (l : ls) c rs) = LZ ls l (c : rs)
lLeft  lz                 = lz

-- | Move the 'ListZipper' to the right.
lRight :: ListZipper a -> ListZipper a
lRight (LZ ls c (r : rs)) = LZ (c : ls) r rs
lRight lz                 = lz

-- | Returns tail of generated by function and initial element list.
iterateTail :: (a -> a) -> a -> [a]
iterateTail f = tail . iterate f -- "tail" will never return a bottom

-- | Generates a list zipper from the given focus and generators.
lGenerator :: (a -> a)     -- ^ The left generator
           -> (a -> a)     -- ^ The right generator
           -> a            -- ^ The focus
           -> ListZipper a -- ^ The resulting list zipper
lGenerator f g x = LZ (iterateTail f x) x (iterateTail g x)
